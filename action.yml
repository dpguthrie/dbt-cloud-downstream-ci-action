name: "dbt Cloud Downstream CI Action"
description: "This action will run dbt Cloud CI jobs taking into account downstream dependencies from projects set up with dbt Mesh"
branding:
  icon: "cloud"
  color: "orange"
author: "Doug Guthrie"
inputs:
  dbt_cloud_service_token:
    description: dbt Cloud Service Token
    required: true
  dbt_cloud_account_id:
    description: dbt Cloud account ID
    required: true
  dbt_cloud_job_id:
    description: dbt Cloud CI Job ID for the current project
    required: true
  dbt_cloud_host:
    description: dbt Cloud host
    required: false
    default: "cloud.getdbt.com"
  include_downstream:
    description: Include downstream models when constructing the step override command (e.g. `dbt build -s model_1+`)
    required: false
    default: "true"
  dbt_command:
    description: The command to run in dbt Cloud - one of `run` or `build`
    required: false
    default: "build"
  github_token:
    description: GitHub token used to write back to the PR results of the action
    required: false
# runs:
#   using: "docker"
#   image: "Dockerfile"
#   env:
#     GITHUB_TOKEN: ${{ inputs.github_token }}

runs:
  using: "composite"
  steps:
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    - name: Install poetry
      uses: abatilo/actions-poetry@v2
    - name: Setup a local virtual environment (if no poetry.toml file)
      shell: bash
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      shell: bash
      run: poetry install --without dev
    - name: Run the automated tests (for example)
      shell: bash
      run: poetry run main.py
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}